var p5 = `<!DOCTYPE html>
<html>
<head>
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.2/p5.js"></script>
<!--<script src="https://raw.githubusercontent.com/bmoren/p5.collide2D/master/p5.collide2d.min.js"></script>
<script src="assets/js/p5/p5.sound.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.2/addons/p5.sound.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.2/addons/p5.dom.js"></script>-->
</head>

<body>
<script>
	function setup() {
		createCanvas(500, 500);
		background('lightblue');
		noStroke();
	}
	function draw() {
		background('lightblue');
		//rect(10, 10, 10, 10);
	}
</script>
</body>

</html>`;

var brain = `<!DOCTYPE html>
<html>
<head>
	<script src="assets/js/brain.js"></script>
</head>

<body>
<script>
// provide optional config object (or undefined). Defaults shown.
const config = {
    binaryThresh: 0.5,
    hiddenLayers: [3],     // array of ints for the sizes of the hidden layers in the network
    activation: 'sigmoid'  // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh']
};

// create a simple feed forward neural network with backpropagation
const net = new brain.NeuralNetwork(config);

net.train([{input: [0, 0], output: [0]},
           {input: [0, 1], output: [1]},
           {input: [1, 0], output: [1]},
           {input: [1, 1], output: [0]}]);

const output = net.run([1, 0]);  // [0.987]
</script>
</body>

</html>`;



var boilerplate = `<!DOCTYPE html>
<html>
<head>
</head>

<body>
</body>

</html>`;




var processing = `<!DOCTYPE html>
<html>
<head>
    <script src='/assets/js/processing.js'></script>
</head>

<body>
    <script>
    void setup() {
        3   size(200, 200);
        4   background(100);
        5   stroke(255);
        6   ellipse(50, 50, 25, 25);
        7   println("hello web!");
        8 }
        9 
       10 // "Comiled" JavaScript code
       11 // this code was autogenerated from PJS
       12 (function(processing, $constants) {
       13   function setup() {
       14     processing.size(200, 200);
       15     processing.background(100);
       16     processing.stroke(255);
       17     processing.ellipse(50, 50, 25, 25);
       18     processing.println("hello web!");
       19   }
       20   processing.setup = setup;
       21 })
    </script>
</body>

</html>`;
let annyangsrc = "<script src='http://cdnjs.cloudflare.com/ajax/libs/annyang/2.6.0/annyang.min.js'></script>";
var annyangproj = `<!DOCTYPE html>
<html>
<head>`
+annyangsrc+
`
</head>

<body>
        <script>
            if(annyang) {

            }
            //annyang.addCommands();
            annyang.start();
        </script>
</body>

</html>`;


var turt2dproject = `<!DOCTYPE html>
<html>
<head>
    <script src='assets/js/turt2d.js'></script>
</head>

<body>
    <canvas></canvas>
    <script>
        function init() {
            frameRate = 30; /*To make a set frame rate*/
            initFrames();
            }
            
            function draw() {
            background("lightblue");
            /*Put your main animations and code here*/
                
            penColor("blue");  
            t.rect(turt.x, turt.y, 200, 200);
                
            showFrames();
            }
            
            
            /*Run Code*/
            animations();
    </script>
</body>

</html>`;


var threejsproject = `<!DOCTYPE html>
<html>
<head>
    
</head>

<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/98/three.min.js"></script>
    <script>
        var camera, scene, renderer;
        var geometry, material, mesh;
        
        init();
        animate();
        
        function init() {
        
            camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );
            camera.position.z = 1;
        
            scene = new THREE.Scene();
        
            geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );
            material = new THREE.MeshNormalMaterial();
        
            mesh = new THREE.Mesh( geometry, material );
            scene.add( mesh );
        
            renderer = new THREE.WebGLRenderer( { antialias: true } );
            renderer.setSize( window.innerWidth, window.innerHeight );
            document.body.appendChild( renderer.domElement );
        
        }
        
        function animate() {
        
            requestAnimationFrame( animate );
        
            mesh.rotation.x += 0.01;
            mesh.rotation.y += 0.02;
        
            renderer.render( scene, camera );
        
        }
    </script>
</body>

</html>`;